var SafaSecurity = new function () {
    function n() {
        var n = new Date,
            t, i;
        n.setTime(n.getTime() + 36e4);
        t = "; expires=" + n.toGMTString();
        i = "USID=" + SafaSecurity.GetRequestId() + "; " + t + "; path=/";
        document.cookie = i
    }
    this.UserInfo = null;
    this.RequestId = null;
    this.async = function (n, t) {
        setTimeout(function () {
            var i = n();
            t && t(i)
        }, 500)
    };
    this.NewUID = function () {
        var n = (new Date).getTime();
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (t) {
            var i = (n + Math.random() * 16) % 16 | 0;
            return n = Math.floor(n / 16), (t == "x" ? i : i & 3 | 8).toString(16)
        })
    };
    this.Encrypt = function (n, t, i) {
        var r = 256,
            f = CryptoJS.enc.Utf8.parse(t),
            u = CryptoJS.PBKDF2(i, f, {
                keySize: (r + 128) / 32,
                iterations: 1e3
            });
        u.clamp();
        var e = CryptoJS.lib.WordArray.create(u.words.slice(0, r / 32)),
            o = CryptoJS.lib.WordArray.create(u.words.slice(r / 32));
        return CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(n), e, {
            keySize: 16,
            iv: o,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        }).toString()
    };
    this.GetRequestId = function () {
        return SafaSecurity.RequestId == undefined && (SafaSecurity.RequestId = SafaSecurity.NewUID()), SafaSecurity.RequestId
    };
    this.CheckLogin = function () {
        document.cookie.indexOf("USID=" + SafaSecurity.GetRequestId()) == -1 && (location.href = "Login.html")
    };
    //---------------------------------------------------------
    this.Login = function (t, i, r, u, f, e, o, s) {
        var n = o === undefined ? SafaSecurity.GetRequestId() : o;
        var tmpSalt = n.split('#')[0];

        this.async(function () {
            var n = s === undefined ? SafaSecurity.GetRequestId() : s,
     
            r = SafaSecurity.Encrypt(t, tmpSalt, "SfSLbf"),
            u = SafaSecurity.Encrypt(i,  tmpSalt,tmpSalt.substring(0, 6));

            return {
                username: "" + r + "",
                password: "" + u + "",
                customCredential: o,
                isPersistent: "false"
            }
        }, function (t) {
            $.ajax({
                url: AppConfig.Params.AuthenticationUrl + "login",
                crossDomain: !0,
                data: JSON.stringify(t),
                dataType: "json",
                type: "POST",
                contentType: "application/json; charset=utf-8",
                processdata: !0,
                success: function (t) {

                    
                    t ? ($.ajaxSetup({
                        cache: !0
                    }),
                 
                    u({
                        Result: !0,
                        Message: ""
                    }), $(function () {
                        $.ajax({
                            xhr: function () {
                                var n = new window.XMLHttpRequest;
                                return n.addEventListener("progress", function (n) {
                                    if (n.lengthComputable) {
                                        var t = n.loaded / n.total;
                                        console.log(t)
                                    }
                                }, !1), n
                            },
                            url: r,
                            success: function (n) {
                                $(".wrapper").remove();
                                e == !0 && $("#login_body").css("background-image", "none");
                                $("#Container").html(n)
                            }
                        })
                    }), f(!0)) : (u({
                        Result: !1,
                        Message: ""
                    }), f(!1))
                },
                error: function (n, t, i) {
                    u({
                        Result: !1,
                        Message: n,
                        ajaxOptions: t,
                        thrownError: i
                    })
                }
            })
        })
    };

    this.CheckOtherUserLogin = function (n, t, onSucces) {
        var i = {
            pUserName: "" + n + "",
            pSessionID: t,
            UserImage: null
        };
        $.ajax({
            url: AppConfig.Params.SecurityUrl + "CheckOtherUserLogin",
            crossDomain: !0,
            data: JSON.stringify(i),
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            processdata: !0,
            success: function (n) {
                onSucces(n)
            },
            error: function () {
                onSucces(!1)
            }
        })
    }

    this.GetAccountInfo = function (callback) {

        if (!AppConfig.Params.AuthenticationUrl)
            AppConfig.LoadObj();
       
        $.ajax({
            url: "CreateAccount.aspx/" + "GetAccountInfo",
            crossDomain: !0,
           
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            processdata: !0,
            success: function (t) {
                
                callback(t);

            },
            error: function (n, t, i) {
                callback({
                    Result: !1,
                    Message: n,
                    ajaxOptions: t,
                    thrownError: i
                })
            }
        })

    };

    this.GetAccountInfo2 = function (NidAccount, callback) {
        if (!NidAccount) return

        if (!AppConfig.Params.AuthenticationUrl)
            AppConfig.LoadObj();
        var t = {
            pNidAccount: NidAccount
        }
        $.ajax({
            url: AppConfig.Params.SecurityUrl + "GetAccountInfo2",
            crossDomain: !0,
            data: JSON.stringify(t),
            dataType: "json",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            processdata: !0,
            success: function (t) {
                t
                callback(t);

            },
            error: function (n, t, i) {
                callback({
                    Result: !1,
                    Message: n,
                    ajaxOptions: t,
                    thrownError: i
                })
            }
        })

    };

},
    CryptoJS = CryptoJS || function (n, t) {
        var u = {},
            f = u.lib = {},
            i = f.Base = function () {
                function n() { }
                return {
                    extend: function (t) {
                        n.prototype = this;
                        var i = new n;
                        return t && i.mixIn(t), i.hasOwnProperty("init") || (i.init = function () {
                            i.$super.init.apply(this, arguments)
                        }), i.init.prototype = i, i.$super = this, i
                    },
                    create: function () {
                        var n = this.extend();
                        return n.init.apply(n, arguments), n
                    },
                    init: function () { },
                    mixIn: function (n) {
                        for (var t in n) n.hasOwnProperty(t) && (this[t] = n[t]);
                        n.hasOwnProperty("toString") && (this.toString = n.toString)
                    },
                    clone: function () {
                        return this.init.prototype.extend(this)
                    }
                }
            }(),
            r = f.WordArray = i.extend({
                init: function (n, i) {
                    n = this.words = n || [];
                    this.sigBytes = i != t ? i : n.length * 4
                },
                toString: function (n) {
                    return (n || h).stringify(this)
                },
                concat: function (n) {
                    var i = this.words,
                        r = n.words,
                        u = this.sigBytes,
                        f = n.sigBytes,
                        e, t;
                    if (this.clamp(), u % 4)
                        for (t = 0; t < f; t++) e = r[t >>> 2] >>> 24 - t % 4 * 8 & 255, i[u + t >>> 2] |= e << 24 - (u + t) % 4 * 8;
                    else if (r.length > 65535)
                        for (t = 0; t < f; t += 4) i[u + t >>> 2] = r[t >>> 2];
                    else i.push.apply(i, r);
                    return this.sigBytes += f, this
                },
                clamp: function () {
                    var i = this.words,
                        t = this.sigBytes;
                    i[t >>> 2] &= 4294967295 << 32 - t % 4 * 8;
                    i.length = n.ceil(t / 4)
                },
                clone: function () {
                    var n = i.clone.call(this);
                    return n.words = this.words.slice(0), n
                },
                random: function (t) {
                    for (var i = [], u = 0; u < t; u += 4) i.push(n.random() * 4294967296 | 0);
                    return new r.init(i, t)
                }
            }),
            e = u.enc = {},
            h = e.Hex = {
                stringify: function (n) {
                    for (var r, u = n.words, f = n.sigBytes, i = [], t = 0; t < f; t++) r = u[t >>> 2] >>> 24 - t % 4 * 8 & 255, i.push((r >>> 4).toString(16)), i.push((r & 15).toString(16));
                    return i.join("")
                },
                parse: function (n) {
                    for (var i = n.length, u = [], t = 0; t < i; t += 2) u[t >>> 3] |= parseInt(n.substr(t, 2), 16) << 24 - t % 8 * 4;
                    return new r.init(u, i / 2)
                }
            },
            o = e.Latin1 = {
                stringify: function (n) {
                    for (var r, u = n.words, f = n.sigBytes, i = [], t = 0; t < f; t++) r = u[t >>> 2] >>> 24 - t % 4 * 8 & 255, i.push(String.fromCharCode(r));
                    return i.join("")
                },
                parse: function (n) {
                    for (var i = n.length, u = [], t = 0; t < i; t++) u[t >>> 2] |= (n.charCodeAt(t) & 255) << 24 - t % 4 * 8;
                    return new r.init(u, i)
                }
            },
            c = e.Utf8 = {
                stringify: function (n) {
                    try {
                        return decodeURIComponent(escape(o.stringify(n)))
                    } catch (t) {
                        throw new Error("Malformed UTF-8 data");
                    }
                },
                parse: function (n) {
                    return o.parse(unescape(encodeURIComponent(n)))
                }
            },
            s = f.BufferedBlockAlgorithm = i.extend({
                reset: function () {
                    this._data = new r.init;
                    this._nDataBytes = 0
                },
                _append: function (n) {
                    typeof n == "string" && (n = c.parse(n));
                    this._data.concat(n);
                    this._nDataBytes += n.sigBytes
                },
                _process: function (t) {
                    var e = this._data,
                        h = e.words,
                        c = e.sigBytes,
                        o = this.blockSize,
                        a = o * 4,
                        u = c / a,
                        i, s, f, l;
                    if (u = t ? n.ceil(u) : n.max((u | 0) - this._minBufferSize, 0), i = u * o, s = n.min(i * 4, c), i) {
                        for (f = 0; f < i; f += o) this._doProcessBlock(h, f);
                        l = h.splice(0, i);
                        e.sigBytes -= s
                    }
                    return new r.init(l, s)
                },
                clone: function () {
                    var n = i.clone.call(this);
                    return n._data = this._data.clone(), n
                },
                _minBufferSize: 0
            }),
            a = f.Hasher = s.extend({
                cfg: i.extend(),
                init: function (n) {
                    this.cfg = this.cfg.extend(n);
                    this.reset()
                },
                reset: function () {
                    s.reset.call(this);
                    this._doReset()
                },
                update: function (n) {
                    return this._append(n), this._process(), this
                },
                finalize: function (n) {
                    n && this._append(n);
                    return this._doFinalize()
                },
                blockSize: 16,
                _createHelper: function (n) {
                    return function (t, i) {
                        return new n.init(i).finalize(t)
                    }
                },
                _createHmacHelper: function (n) {
                    return function (t, i) {
                        return new l.HMAC.init(n, i).finalize(t)
                    }
                }
            }),
            l = u.algo = {};
        return u
    }(Math);
(function (n) {
    var i = CryptoJS,
        r = i.lib,
        t = r.Base,
        f = r.WordArray,
        u = i.x64 = {},
        e = u.Word = t.extend({
            init: function (n, t) {
                this.high = n;
                this.low = t
            }
        }),
        o = u.WordArray = t.extend({
            init: function (t, i) {
                t = this.words = t || [];
                this.sigBytes = i != n ? i : t.length * 8
            },
            toX32: function () {
                for (var i, r = this.words, u = r.length, n = [], t = 0; t < u; t++) i = r[t], n.push(i.high), n.push(i.low);
                return f.create(n, this.sigBytes)
            },
            clone: function () {
                for (var r = t.clone.call(this), i = r.words = this.words.slice(0), u = i.length, n = 0; n < u; n++) i[n] = i[n].clone();
                return r
            }
        })
})(),
function () {
    var n = CryptoJS,
        t = n.lib,
        i = t.WordArray,
        r = n.enc,
        u = r.Base64 = {
            stringify: function (n) {
                var u = n.words,
                    e = n.sigBytes,
                    o = this._map,
                    i, t, r, f;
                for (n.clamp(), i = [], t = 0; t < e; t += 3) {
                    var s = u[t >>> 2] >>> 24 - t % 4 * 8 & 255,
                        h = u[t + 1 >>> 2] >>> 24 - (t + 1) % 4 * 8 & 255,
                        c = u[t + 2 >>> 2] >>> 24 - (t + 2) % 4 * 8 & 255,
                        l = s << 16 | h << 8 | c;
                    for (r = 0; r < 4 && t + r * .75 < e; r++) i.push(o.charAt(l >>> 6 * (3 - r) & 63))
                }
                if (f = o.charAt(64), f)
                    while (i.length % 4) i.push(f);
                return i.join("")
            },
            parse: function (n) {
                var o = n.length,
                    u = this._map,
                    s = u.charAt(64),
                    f, e, r, t, h, c;
                for (s && (f = n.indexOf(s), f != -1 && (o = f)), e = [], r = 0, t = 0; t < o; t++) t % 4 && (h = u.indexOf(n.charAt(t - 1)) << t % 4 * 2, c = u.indexOf(n.charAt(t)) >>> 6 - t % 4 * 2, e[r >>> 2] |= (h | c) << 24 - r % 4 * 8, r++);
                return i.create(e, r)
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        }
}(),
function () {
    var t = CryptoJS,
        r = t.lib,
        f = r.WordArray,
        i = r.Hasher,
        e = t.algo,
        n = [],
        u = e.SHA1 = i.extend({
            _doReset: function () {
                this._hash = new f.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
            },
            _doProcessBlock: function (t, i) {
                for (var c, l, r = this._hash.words, s = r[0], f = r[1], e = r[2], o = r[3], h = r[4], u = 0; u < 80; u++) u < 16 ? n[u] = t[i + u] | 0 : (c = n[u - 3] ^ n[u - 8] ^ n[u - 14] ^ n[u - 16], n[u] = c << 1 | c >>> 31), l = (s << 5 | s >>> 27) + h + n[u], l += u < 20 ? (f & e | ~f & o) + 1518500249 : u < 40 ? (f ^ e ^ o) + 1859775393 : u < 60 ? (f & e | f & o | e & o) - 1894007588 : (f ^ e ^ o) - 899497514, h = o, o = e, e = f << 30 | f >>> 2, f = s, s = l;
                r[0] = r[0] + s | 0;
                r[1] = r[1] + f | 0;
                r[2] = r[2] + e | 0;
                r[3] = r[3] + o | 0;
                r[4] = r[4] + h | 0
            },
            _doFinalize: function () {
                var i = this._data,
                    n = i.words,
                    r = this._nDataBytes * 8,
                    t = i.sigBytes * 8;
                return n[t >>> 5] |= 128 << 24 - t % 32, n[(t + 64 >>> 9 << 4) + 14] = Math.floor(r / 4294967296), n[(t + 64 >>> 9 << 4) + 15] = r, i.sigBytes = n.length * 4, this._process(), this._hash
            },
            clone: function () {
                var n = i.clone.call(this);
                return n._hash = this._hash.clone(), n
            }
        });
    t.SHA1 = i._createHelper(u);
    t.HmacSHA1 = i._createHmacHelper(u)
}(),
function () {
    function n() {
        return t.create.apply(t, arguments)
    }
    var r = CryptoJS,
        o = r.lib,
        u = o.Hasher,
        e = r.x64,
        t = e.Word,
        s = e.WordArray,
        h = r.algo,
        c = [n(1116352408, 3609767458), n(1899447441, 602891725), n(3049323471, 3964484399), n(3921009573, 2173295548), n(961987163, 4081628472), n(1508970993, 3053834265), n(2453635748, 2937671579), n(2870763221, 3664609560), n(3624381080, 2734883394), n(310598401, 1164996542), n(607225278, 1323610764), n(1426881987, 3590304994), n(1925078388, 4068182383), n(2162078206, 991336113), n(2614888103, 633803317), n(3248222580, 3479774868), n(3835390401, 2666613458), n(4022224774, 944711139), n(264347078, 2341262773), n(604807628, 2007800933), n(770255983, 1495990901), n(1249150122, 1856431235), n(1555081692, 3175218132), n(1996064986, 2198950837), n(2554220882, 3999719339), n(2821834349, 766784016), n(2952996808, 2566594879), n(3210313671, 3203337956), n(3336571891, 1034457026), n(3584528711, 2466948901), n(113926993, 3758326383), n(338241895, 168717936), n(666307205, 1188179964), n(773529912, 1546045734), n(1294757372, 1522805485), n(1396182291, 2643833823), n(1695183700, 2343527390), n(1986661051, 1014477480), n(2177026350, 1206759142), n(2456956037, 344077627), n(2730485921, 1290863460), n(2820302411, 3158454273), n(3259730800, 3505952657), n(3345764771, 106217008), n(3516065817, 3606008344), n(3600352804, 1432725776), n(4094571909, 1467031594), n(275423344, 851169720), n(430227734, 3100823752), n(506948616, 1363258195), n(659060556, 3750685593), n(883997877, 3785050280), n(958139571, 3318307427), n(1322822218, 3812723403), n(1537002063, 2003034995), n(1747873779, 3602036899), n(1955562222, 1575990012), n(2024104815, 1125592928), n(2227730452, 2716904306), n(2361852424, 442776044), n(2428436474, 593698344), n(2756734187, 3733110249), n(3204031479, 2999351573), n(3329325298, 3815920427), n(3391569614, 3928383900), n(3515267271, 566280711), n(3940187606, 3454069534), n(4118630271, 4000239992), n(116418474, 1914138554), n(174292421, 2731055270), n(289380356, 3203993006), n(460393269, 320620315), n(685471733, 587496836), n(852142971, 1086792851), n(1017036298, 365543100), n(1126000580, 2618297676), n(1288033470, 3409855158), n(1501505948, 4234509866), n(1607167915, 987167468), n(1816402316, 1246189591)],
        i = [],
        f;
    (function () {
        for (var t = 0; t < 80; t++) i[t] = n()
    })();
    f = h.SHA512 = u.extend({
        _doReset: function () {
            this._hash = new s.init([new t.init(1779033703, 4089235720), new t.init(3144134277, 2227873595), new t.init(1013904242, 4271175723), new t.init(2773480762, 1595750129), new t.init(1359893119, 2917565137), new t.init(2600822924, 725511199), new t.init(528734635, 4215389547), new t.init(1541459225, 327033209)])
        },
        _doProcessBlock: function (n, t) {
            for (var tt, it, h, l = this._hash.words, et = l[0], ot = l[1], st = l[2], ht = l[3], ct = l[4], lt = l[5], at = l[6], vt = l[7], fi = et.high, yt = et.low, ei = ot.high, pt = ot.low, oi = st.high, wt = st.low, si = ht.high, bt = ht.low, hi = ct.high, kt = ct.low, ci = lt.high, dt = lt.low, li = at.high, gt = at.low, ai = vt.high, ni = vt.low, f = fi, r = yt, w = ei, a = pt, b = oi, v = wt, ri = si, k = bt, e = hi, u = kt, ti = ci, d = dt, ii = li, g = gt, ui = ai, nt = ni, o = 0; o < 80; o++) {
                if (tt = i[o], o < 16) it = tt.high = n[t + o * 2] | 0, h = tt.low = n[t + o * 2 + 1] | 0;
                else {
                    var vi = i[o - 15],
                        y = vi.high,
                        rt = vi.low,
                        ur = (y >>> 1 | rt << 31) ^ (y >>> 8 | rt << 24) ^ y >>> 7,
                        yi = (rt >>> 1 | y << 31) ^ (rt >>> 8 | y << 24) ^ (rt >>> 7 | y << 25),
                        pi = i[o - 2],
                        p = pi.high,
                        ut = pi.low,
                        fr = (p >>> 19 | ut << 13) ^ (p << 3 | ut >>> 29) ^ p >>> 6,
                        wi = (ut >>> 19 | p << 13) ^ (ut << 3 | p >>> 29) ^ (ut >>> 6 | p << 26),
                        bi = i[o - 7],
                        er = bi.high,
                        or = bi.low,
                        ki = i[o - 16],
                        sr = ki.high,
                        di = ki.low,
                        h = yi + or,
                        it = ur + er + (h >>> 0 < yi >>> 0 ? 1 : 0),
                        h = h + wi,
                        it = it + fr + (h >>> 0 < wi >>> 0 ? 1 : 0),
                        h = h + di,
                        it = it + sr + (h >>> 0 < di >>> 0 ? 1 : 0);
                    tt.high = it;
                    tt.low = h
                }
                var hr = e & ti ^ ~e & ii,
                    gi = u & d ^ ~u & g,
                    cr = f & w ^ f & b ^ w & b,
                    lr = r & a ^ r & v ^ a & v,
                    ar = (f >>> 28 | r << 4) ^ (f << 30 | r >>> 2) ^ (f << 25 | r >>> 7),
                    nr = (r >>> 28 | f << 4) ^ (r << 30 | f >>> 2) ^ (r << 25 | f >>> 7),
                    vr = (e >>> 14 | u << 18) ^ (e >>> 18 | u << 14) ^ (e << 23 | u >>> 9),
                    yr = (u >>> 14 | e << 18) ^ (u >>> 18 | e << 14) ^ (u << 23 | e >>> 9),
                    tr = c[o],
                    pr = tr.high,
                    ir = tr.low,
                    s = nt + yr,
                    ft = ui + vr + (s >>> 0 < nt >>> 0 ? 1 : 0),
                    s = s + gi,
                    ft = ft + hr + (s >>> 0 < gi >>> 0 ? 1 : 0),
                    s = s + ir,
                    ft = ft + pr + (s >>> 0 < ir >>> 0 ? 1 : 0),
                    s = s + h,
                    ft = ft + it + (s >>> 0 < h >>> 0 ? 1 : 0),
                    rr = nr + lr,
                    wr = ar + cr + (rr >>> 0 < nr >>> 0 ? 1 : 0);
                ui = ii;
                nt = g;
                ii = ti;
                g = d;
                ti = e;
                d = u;
                u = k + s | 0;
                e = ri + ft + (u >>> 0 < k >>> 0 ? 1 : 0) | 0;
                ri = b;
                k = v;
                b = w;
                v = a;
                w = f;
                a = r;
                r = s + rr | 0;
                f = ft + wr + (r >>> 0 < s >>> 0 ? 1 : 0) | 0
            }
            yt = et.low = yt + r;
            et.high = fi + f + (yt >>> 0 < r >>> 0 ? 1 : 0);
            pt = ot.low = pt + a;
            ot.high = ei + w + (pt >>> 0 < a >>> 0 ? 1 : 0);
            wt = st.low = wt + v;
            st.high = oi + b + (wt >>> 0 < v >>> 0 ? 1 : 0);
            bt = ht.low = bt + k;
            ht.high = si + ri + (bt >>> 0 < k >>> 0 ? 1 : 0);
            kt = ct.low = kt + u;
            ct.high = hi + e + (kt >>> 0 < u >>> 0 ? 1 : 0);
            dt = lt.low = dt + d;
            lt.high = ci + ti + (dt >>> 0 < d >>> 0 ? 1 : 0);
            gt = at.low = gt + g;
            at.high = li + ii + (gt >>> 0 < g >>> 0 ? 1 : 0);
            ni = vt.low = ni + nt;
            vt.high = ai + ui + (ni >>> 0 < nt >>> 0 ? 1 : 0)
        },
        _doFinalize: function () {
            var i = this._data,
                n = i.words,
                r = this._nDataBytes * 8,
                t = i.sigBytes * 8;
            return n[t >>> 5] |= 128 << 24 - t % 32, n[(t + 128 >>> 10 << 5) + 30] = Math.floor(r / 4294967296), n[(t + 128 >>> 10 << 5) + 31] = r, i.sigBytes = n.length * 4, this._process(), this._hash.toX32()
        },
        clone: function () {
            var n = u.clone.call(this);
            return n._hash = this._hash.clone(), n
        },
        blockSize: 32
    });
    r.SHA512 = u._createHelper(f);
    r.HmacSHA512 = u._createHmacHelper(f)
}(),
function () {
    var n = CryptoJS,
        t = n.lib,
        i = t.Base,
        r = n.enc,
        u = r.Utf8,
        f = n.algo,
        e = f.HMAC = i.extend({
            init: function (n, t) {
                var r, f, i;
                n = this._hasher = new n.init;
                typeof t == "string" && (t = u.parse(t));
                r = n.blockSize;
                f = r * 4;
                t.sigBytes > f && (t = n.finalize(t));
                t.clamp();
                var e = this._oKey = t.clone(),
                    o = this._iKey = t.clone(),
                    s = e.words,
                    h = o.words;
                for (i = 0; i < r; i++) s[i] ^= 1549556828, h[i] ^= 909522486;
                e.sigBytes = o.sigBytes = f;
                this.reset()
            },
            reset: function () {
                var n = this._hasher;
                n.reset();
                n.update(this._iKey)
            },
            update: function (n) {
                return this._hasher.update(n), this
            },
            finalize: function (n) {
                var t = this._hasher,
                    i = t.finalize(n);
                return t.reset(), t.finalize(this._oKey.clone().concat(i))
            }
        })
}(),
function () {
    var n = CryptoJS,
        i = n.lib,
        r = i.Base,
        u = i.WordArray,
        t = n.algo,
        f = t.SHA1,
        e = t.HMAC,
        o = t.PBKDF2 = r.extend({
            cfg: r.extend({
                keySize: 4,
                hasher: f,
                iterations: 1
            }),
            init: function (n) {
                this.cfg = this.cfg.extend(n)
            },
            compute: function (n, t) {
                for (var s = this.cfg, r = e.create(s.hasher, n), f = u.create(), l = u.create([1]), p = f.words, w = l.words, a = s.keySize, b = s.iterations, o, c, y, i; p.length < a;) {
                    o = r.update(t).finalize(l);
                    r.reset();
                    var v = o.words,
                        k = v.length,
                        h = o;
                    for (c = 1; c < b; c++)
                        for (h = r.finalize(h), r.reset(), y = h.words, i = 0; i < k; i++) v[i] ^= y[i];
                    f.concat(o);
                    w[0]++
                }
                return f.sigBytes = a * 4, f
            }
        });
    n.PBKDF2 = function (n, t, i) {
        return o.create(i).compute(n, t)
    }
}();
CryptoJS.lib.Cipher || function (n) {
    var i = CryptoJS,
        t = i.lib,
        r = t.Base,
        u = t.WordArray,
        s = t.BufferedBlockAlgorithm,
        h = i.enc,
        it = h.Utf8,
        c = h.Base64,
        l = i.algo,
        a = l.EvpKDF,
        e = t.Cipher = s.extend({
            cfg: r.extend(),
            createEncryptor: function (n, t) {
                return this.create(this._ENC_XFORM_MODE, n, t)
            },
            createDecryptor: function (n, t) {
                return this.create(this._DEC_XFORM_MODE, n, t)
            },
            init: function (n, t, i) {
                this.cfg = this.cfg.extend(i);
                this._xformMode = n;
                this._key = t;
                this.reset()
            },
            reset: function () {
                s.reset.call(this);
                this._doReset()
            },
            process: function (n) {
                return this._append(n), this._process()
            },
            finalize: function (n) {
                n && this._append(n);
                return this._doFinalize()
            },
            keySize: 4,
            ivSize: 4,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            _createHelper: function () {
                function n(n) {
                    return typeof n == "string" ? tt : f
                }
                return function (t) {
                    return {
                        encrypt: function (i, r, u) {
                            return n(r).encrypt(t, i, r, u)
                        },
                        decrypt: function (i, r, u) {
                            return n(r).decrypt(t, i, r, u)
                        }
                    }
                }
            }()
        }),
        rt = t.StreamCipher = e.extend({
            _doFinalize: function () {
                return this._process(!0)
            },
            blockSize: 1
        }),
        v = i.mode = {},
        y = t.BlockCipherMode = r.extend({
            createEncryptor: function (n, t) {
                return this.Encryptor.create(n, t)
            },
            createDecryptor: function (n, t) {
                return this.Decryptor.create(n, t)
            },
            init: function (n, t) {
                this._cipher = n;
                this._iv = t
            }
        }),
        p = v.CBC = function () {
            function i(t, i, r) {
                var e = this._iv,
                    f, u;
                for (e ? (f = e, this._iv = n) : f = this._prevBlock, u = 0; u < r; u++) t[i + u] ^= f[u]
            }
            var t = y.extend();
            return t.Encryptor = t.extend({
                processBlock: function (n, t) {
                    var r = this._cipher,
                        u = r.blockSize;
                    i.call(this, n, t, u);
                    r.encryptBlock(n, t);
                    this._prevBlock = n.slice(t, t + u)
                }
            }), t.Decryptor = t.extend({
                processBlock: function (n, t) {
                    var r = this._cipher,
                        u = r.blockSize,
                        f = n.slice(t, t + u);
                    r.decryptBlock(n, t);
                    i.call(this, n, t, u);
                    this._prevBlock = f
                }
            }), t
        }(),
        w = i.pad = {},
        b = w.Pkcs7 = {
            pad: function (n, t) {
                for (var o, r = t * 4, i = r - n.sigBytes % r, s = i << 24 | i << 16 | i << 8 | i, f = [], e = 0; e < i; e += 4) f.push(s);
                o = u.create(f, i);
                n.concat(o)
            },
            unpad: function (n) {
                var t = n.words[n.sigBytes - 1 >>> 2] & 255;
                n.sigBytes -= t
            }
        },
        ut = t.BlockCipher = e.extend({
            cfg: e.cfg.extend({
                mode: p,
                padding: b
            }),
            reset: function () {
                var t;
                e.reset.call(this);
                var i = this.cfg,
                    r = i.iv,
                    n = i.mode;
                this._xformMode == this._ENC_XFORM_MODE ? t = n.createEncryptor : (t = n.createDecryptor, this._minBufferSize = 1);
                this._mode = t.call(n, this, r && r.words)
            },
            _doProcessBlock: function (n, t) {
                this._mode.processBlock(n, t)
            },
            _doFinalize: function () {
                var t = this.cfg.padding,
                    n;
                return this._xformMode == this._ENC_XFORM_MODE ? (t.pad(this._data, this.blockSize), n = this._process(!0)) : (n = this._process(!0), t.unpad(n)), n
            },
            blockSize: 4
        }),
        o = t.CipherParams = r.extend({
            init: function (n) {
                this.mixIn(n)
            },
            toString: function (n) {
                return (n || this.formatter).stringify(this)
            }
        }),
        k = i.format = {},
        d = k.OpenSSL = {
            stringify: function (n) {
                var t = n.ciphertext,
                    i = n.salt,
                    r;
                return r = i ? u.create([1398893684, 1701076831]).concat(i).concat(t) : t, r.toString(c)
            },
            parse: function (n) {
                var i = c.parse(n),
                    t = i.words,
                    r;
                return t[0] == 1398893684 && t[1] == 1701076831 && (r = u.create(t.slice(2, 4)), t.splice(0, 4), i.sigBytes -= 16), o.create({
                    ciphertext: i,
                    salt: r
                })
            }
        },
        f = t.SerializableCipher = r.extend({
            cfg: r.extend({
                format: d
            }),
            encrypt: function (n, t, i, r) {
                r = this.cfg.extend(r);
                var f = n.createEncryptor(i, r),
                    e = f.finalize(t),
                    u = f.cfg;
                return o.create({
                    ciphertext: e,
                    key: i,
                    iv: u.iv,
                    algorithm: n,
                    mode: u.mode,
                    padding: u.padding,
                    blockSize: n.blockSize,
                    formatter: r.format
                })
            },
            decrypt: function (n, t, i, r) {
                r = this.cfg.extend(r);
                t = this._parse(t, r.format);
                return n.createDecryptor(i, r).finalize(t.ciphertext)
            },
            _parse: function (n, t) {
                return typeof n == "string" ? t.parse(n, this) : n
            }
        }),
        g = i.kdf = {},
        nt = g.OpenSSL = {
            execute: function (n, t, i, r) {
                r || (r = u.random(8));
                var f = a.create({
                    keySize: t + i
                }).compute(n, r),
                    e = u.create(f.words.slice(t), i * 4);
                return f.sigBytes = t * 4, o.create({
                    key: f,
                    iv: e,
                    salt: r
                })
            }
        },
        tt = t.PasswordBasedCipher = f.extend({
            cfg: f.cfg.extend({
                kdf: nt
            }),
            encrypt: function (n, t, i, r) {
                var u, e;
                return r = this.cfg.extend(r), u = r.kdf.execute(i, n.keySize, n.ivSize), r.iv = u.iv, e = f.encrypt.call(this, n, t, u.key, r), e.mixIn(u), e
            },
            decrypt: function (n, t, i, r) {
                var u;
                return r = this.cfg.extend(r), t = this._parse(t, r.format), u = r.kdf.execute(i, n.keySize, n.ivSize, t.salt), r.iv = u.iv, f.decrypt.call(this, n, t, u.key, r)
            }
        })
}(),
    function () {
        var t = CryptoJS,
            y = t.lib,
            e = y.BlockCipher,
            p = t.algo,
            n = [],
            o = [],
            s = [],
            h = [],
            c = [],
            l = [],
            i = [],
            r = [],
            u = [],
            f = [],
            a, v;
        (function () {
            for (var e, p, a, t, v = [], y = 0; y < 256; y++) v[y] = y < 128 ? y << 1 : y << 1 ^ 283;
            for (e = 0, p = 0, y = 0; y < 256; y++) {
                a = p ^ p << 1 ^ p << 2 ^ p << 3 ^ p << 4;
                a = a >>> 8 ^ a & 255 ^ 99;
                n[e] = a;
                o[a] = e;
                var w = v[e],
                    b = v[w],
                    k = v[b],
                    t = v[a] * 257 ^ a * 16843008;
                s[e] = t << 24 | t >>> 8;
                h[e] = t << 16 | t >>> 16;
                c[e] = t << 8 | t >>> 24;
                l[e] = t;
                t = k * 16843009 ^ b * 65537 ^ w * 257 ^ e * 16843008;
                i[a] = t << 24 | t >>> 8;
                r[a] = t << 16 | t >>> 16;
                u[a] = t << 8 | t >>> 24;
                f[a] = t;
                e ? (e = w ^ v[v[v[k ^ w]]], p ^= v[v[p]]) : e = p = 1
            }
        })();
        a = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        v = p.AES = e.extend({
            _doReset: function () {
                for (var v, s, t, l = this._key, y = l.words, o = l.sigBytes / 4, p = this._nRounds = o + 6, c = (p + 1) * 4, h = this._keySchedule = [], e = 0; e < c; e++) e < o ? h[e] = y[e] : (t = h[e - 1], e % o ? o > 6 && e % o == 4 && (t = n[t >>> 24] << 24 | n[t >>> 16 & 255] << 16 | n[t >>> 8 & 255] << 8 | n[t & 255]) : (t = t << 8 | t >>> 24, t = (n[t >>> 24] << 24 | n[t >>> 16 & 255] << 16 | n[t >>> 8 & 255] << 8 | n[t & 255]) ^ a[e / o | 0] << 24), h[e] = h[e - o] ^ t);
                for (v = this._invKeySchedule = [], s = 0; s < c; s++) e = c - s, t = s % 4 ? h[e] : h[e - 4], v[s] = s < 4 || e <= 4 ? t : i[n[t >>> 24]] ^ r[n[t >>> 16 & 255]] ^ u[n[t >>> 8 & 255]] ^ f[n[t & 255]]
            },
            encryptBlock: function (t, i) {
                this._doCryptBlock(t, i, this._keySchedule, s, h, c, l, n)
            },
            decryptBlock: function (n, t) {
                var e = n[t + 1];
                n[t + 1] = n[t + 3];
                n[t + 3] = e;
                this._doCryptBlock(n, t, this._invKeySchedule, i, r, u, f, o);
                e = n[t + 1];
                n[t + 1] = n[t + 3];
                n[t + 3] = e
            },
            _doCryptBlock: function (n, t, i, r, u, f, e, o) {
                for (var k = this._nRounds, s = n[t] ^ i[0], h = n[t + 1] ^ i[1], c = n[t + 2] ^ i[2], l = n[t + 3] ^ i[3], a = 4, v = 1; v < k; v++) {
                    var y = r[s >>> 24] ^ u[h >>> 16 & 255] ^ f[c >>> 8 & 255] ^ e[l & 255] ^ i[a++],
                        p = r[h >>> 24] ^ u[c >>> 16 & 255] ^ f[l >>> 8 & 255] ^ e[s & 255] ^ i[a++],
                        w = r[c >>> 24] ^ u[l >>> 16 & 255] ^ f[s >>> 8 & 255] ^ e[h & 255] ^ i[a++],
                        b = r[l >>> 24] ^ u[s >>> 16 & 255] ^ f[h >>> 8 & 255] ^ e[c & 255] ^ i[a++];
                    s = y;
                    h = p;
                    c = w;
                    l = b
                }
                var y = (o[s >>> 24] << 24 | o[h >>> 16 & 255] << 16 | o[c >>> 8 & 255] << 8 | o[l & 255]) ^ i[a++],
                    p = (o[h >>> 24] << 24 | o[c >>> 16 & 255] << 16 | o[l >>> 8 & 255] << 8 | o[s & 255]) ^ i[a++],
                    w = (o[c >>> 24] << 24 | o[l >>> 16 & 255] << 16 | o[s >>> 8 & 255] << 8 | o[h & 255]) ^ i[a++],
                    b = (o[l >>> 24] << 24 | o[s >>> 16 & 255] << 16 | o[h >>> 8 & 255] << 8 | o[c & 255]) ^ i[a++];
                n[t] = y;
                n[t + 1] = p;
                n[t + 2] = w;
                n[t + 3] = b
            },
            keySize: 8
        });
        t.AES = e._createHelper(v)
    }();


